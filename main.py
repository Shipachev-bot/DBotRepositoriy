import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.types import FSInputFile, URLInputFile, BufferedInputFile
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from states import StateSelection
import time

import keybords
from aiogram.utils.keyboard import ReplyKeyboardMarkup, ReplyKeyboardBuilder, InlineKeyboardBuilder

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token="8158336790:AAFk4Mo-_zMut4Wx08aLc97i2n-OfmFpt4s")
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –±–æ—Ç –î–µ–ª—è–Ω–∞!üå≤\n\n–ú–æ—è –∑–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞—Ä–∞—Ç—å—Å—è –ø–æ–º–æ—á—å –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, –Ω–∞–¥–µ—é—Å—å, —á—Ç–æ –≤–º–µ—Å—Ç–µ —É –Ω–∞—Å –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è!\n\n–í –∫–∞–∫–æ–º –º–æ–¥—É–ª–µ –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏—è?\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ.\n\n–ï—Å–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –Ω–∞—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç —Å–ª–æ–≤–æ –°–ø—Ä–∞–≤–∫–∞ ",
        reply_markup=keybords.main_keybord())
    await state.set_state(StateSelection.moduleSelection)
    counter.clear()


@dp.message(F.text.lower() == "–º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—èüì±")
async def answer_no(message: Message):
    # await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª', reply_markup=keybords.mobile_app_first_keybord())
    await message.answer('–≠—Ç–æ—Ç –±–ª–æ–∫ –≤ –ø—Ä–æ—Ü–µ—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –ø–æ—Ç–æ—Ä–æ–ø–∏—Ç–µ –ò–ª—å—é –∏ —Ç—É—Ç –ø–æ—è–≤—è—Ç—Å—è –ø–æ–¥—Å–∫–∞–∑–∫–∏')


@dp.message(F.text.lower() == "–º–æ–¥—É–ª—å 1c")
async def answer_no(message: Message):
    # await message.answer('–û–π, —Ç—É—Ç –¥–∞–≤–∞–π —Å–∞–º')
    await message.answer('–≠—Ç–æ—Ç –±–ª–æ–∫ –≤ –ø—Ä–æ—Ü–µc—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –ø–æ—Ç–æ—Ä–æ–ø–∏—Ç–µ –ò–ª—å—é –∏ —Ç—É—Ç –ø–æ—è–≤—è—Ç—Å—è –ø–æ–¥—Å–∫–∞–∑–∫–∏')


@dp.message(F.text.lower() == "–Ω–∞–∑–∞–¥ üîô")
async def answer_no(message: Message, state: FSMContext):
    data = await state.get_state()
    if data == StateSelection.sectionSelection:
        await message.answer('–û–∫–µ–π, –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å —Å –º–æ–¥—É–ª–µ–º, —Ö–µ-—Ö–µ!', reply_markup=keybords.main_keybord())
        await state.set_state(StateSelection.moduleSelection)
    elif data == StateSelection.create_infro or data == StateSelection.ls_state:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª', reply_markup=keybords.web_first_keybord())
        await state.set_state(StateSelection.sectionSelection)
    elif data == StateSelection.DA_state or data == StateSelection.ls_state or data == StateSelection.employes or data == StateSelection.count or data == StateSelection.maps or data == StateSelection.calcSelection:
        await message.answer('–û–∫–µ–π, –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å —Å –º–æ–¥—É–ª–µ–º, —Ö–µ-—Ö–µ!', reply_markup=keybords.main_keybord())
        await state.set_state(StateSelection.moduleSelection)
    else:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")


@dp.message(F.text.lower() == "–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def LS(message: Message, state: FSMContext):
    await message.answer_photo(
        photo='AgACAgIAAxkBAAIJoWcsXO_BYkDNbVuAHoseY00m6LegAAJL5DEbRXhgSUxTi-lS5v8LAQADAgADeQADNgQ',
        caption="<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç ‚Äî —ç—Ç–æ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –°–∏—Å—Ç–µ–º–µ.–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç: \n\n–í–∏–¥–µ—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –∏ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω–æ–º—É —Ç–∞—Ä–∏—Ñ—É; \n\n–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è; \n\n–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –æ–±–ª–∞—Å—Ç–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è; \n\n–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è; \n\n–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å —Å–º–µ–Ω—É –∏ –æ–ø–ª–∞—Ç—É —Ç–∞—Ä–∏—Ñ–∞; \n\n–í–∫–ª—é—á–∞—Ç—å –∏ –æ—Ç–∫–ª—é—á–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ø—É—Ç–Ω–∏–∫—É Sentinel \n\n–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –º–æ–¥—É–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.\n\n<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ</b>",
        parse_mode="html",
        reply_markup=keybords.LS_keybord())
    await state.set_state(StateSelection.ls_state)


@dp.message(F.text.lower() == "–∫–∞—Ä—Ç—ã/—Å–ø—É—Ç–Ω–∏–∫–∏")
async def answer_no(message: Message):
    await message.answer('–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω', reply_markup=keybords.main_keybord())


@dp.message(F.text.lower() == "–∑–∞–ø–∏—Å—å —Ç—Ä–µ–∫–∞")
async def answer_no(message: Message):
    await message.answer_photo(
        photo='AgACAgIAAxkBAAOTZxm5zlbv2DjbsimKj_HCxAOUTvIAAs7oMRsDGchIFHfbqZ2pqKsBAAMCAAN4AAM2BA',
        caption="–ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–∫ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ!\n–ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å¬ª, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è.\n–í–æ –≤—Ä–µ–º—è –¥–≤–∏–∂–µ–Ω–∏—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ª–∏–Ω–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π\n–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å¬ª.",
        reply_markup=keybords.treckRecording_keybord())


@dp.message(F.text.lower() == "—Å–ø–∞—Å–∏–±–æ! –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞!")
async def trouble_Complete(message: Message):
    await message.answer('–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!', reply_markup=keybords.main_keybord())


@dp.message(F.text.lower() == "–Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ!")
async def dont_anderstand(message: Message):
    await message.answer(
        '–î–ª—è –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–π —Å–ø—Ä–∞–≤–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n+7913-039-55-90\n–¢–∞–∫–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à —Å–∞–π—Ç  https://www.delyana.ru/',
        reply_markup=keybords.main_keybord())


@dp.message(F.text.lower() == "—Å–ø—Ä–∞–≤–∫–∞")
async def dont_anderstand(message: Message, state: FSMContext):
    await message.answer(
        '–î–ª—è –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–π —Å–ø—Ä–∞–≤–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n+7913-039-55-90\n–¢–∞–∫–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à —Å–∞–π—Ç  https://www.delyana.ru/',
        reply_markup=keybords.main_keybord())
    await state.set_state(StateSelection.moduleSelection)


@dp.message(F.text.lower() == "web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üñ•")
async def dont_anderstand(message: Message, state: FSMContext):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª', reply_markup=keybords.web_first_keybord())
    await state.set_state(StateSelection.sectionSelection)


@dp.message(F.text.lower() == "–∑–∞–≥—Ä—É–∑–∫–∞ xml –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π")
async def create_delyana_gpx(message: Message):
    await message.answer_photo(
        photo='AgACAgIAAxkBAAMOZx-OX9-9SvJ6yVYhGtYreKFvr8kAAmDhMRvAvthIBILBmLvIUzUBAAMCAAN5AAM2BA',
        caption='<b>–®–∞–≥ ‚Ññ1</b>\n\n–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ–ª—è–Ω—ã –∏–∑ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏ XML –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª ¬´–î–µ–ª—è–Ω—ã¬ª –≤ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n–î–∞–ª–µ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—é (XML)¬ª',
        parse_mode="html")
    await message.answer_photo(
        photo='AgACAgIAAxkBAAMyZx-PqKGgEv8q0Ix6kUDMqd3fc0sAAl_hMRvAvthIruTsaCW44iYBAAMCAAN4AAM2BA',
        caption='<b>–®–∞–≥ ‚Ññ2</b>\n\n–ü–æ—Å–ª–µ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–±–æ—á—É—é –æ–±–ª–∞—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞, –¥–∞—Ç—å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏, –≤—ã–±—Ä–∞—Ç—å XML –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å¬ª\n–õ–µ—Å–æ—Å–µ–∫–∏ –∏–∑ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏ ¬´–≤—Å—Ç–∞–Ω—É—Ç –Ω–∞ —Å–≤–æ–∏ –º–µ—Å—Ç–∞¬ª, –∏ –æ—Ç–æ–±—Ä–∞–∑—è—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –¥–µ–ª—è–Ω.',
        parse_mode="html")


@dp.message(F.text.lower() == "—Å–æ–∑–¥–∞—Ç—å –¥–µ–ª—è–Ω—É –ø–æ gpx")
async def create_delyana_gpx(message: Message):
    await message.answer_photo(
        photo='AgACAgIAAxkBAAMrZx-Pb0g88Epkqwln8tby3VzmtssAAo3jMRuxo-lIRQiLAlT597YBAAMCAAN5AAM2BA',
        caption='<b>–®–∞–≥ ‚Ññ1</b>\n\n–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–µ–ª—è–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª ¬´–ü—Ä–æ–µ–∫—Ç—ã¬ª, –∏ –≤—ã–±—Ä–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç, –¥–∞–ª–µ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∑–Ω–∞—á–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏.',
        parse_mode="html")
    await message.answer_photo(
        photo='AgACAgIAAxkBAAMaZx-O9A0mvclytWuGZB1KSc3plDYAAo7jMRuxo-lI5T2puPvS6XYBAAMCAAN4AAM2BA',
        caption='<b>–®–∞–≥ ‚Ññ2</b>\n\n–í –ø–æ—è–≤–∏–≤—à–µ–º—Å—è –æ–∫–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å GPX¬ª, –∏ –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ ¬´–ü–æ–ª–∏–≥–æ–Ω¬ª –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª',
        parse_mode="html")


@dp.message(Command('new'))
async def send_album(message: Message):
    file_ids = [
        'AgACAgIAAxkBAAIB02cbEzsHEvEX71fkEe3TMlxvFc6PAAJg4TEbwL7YSNccVJ7WDR9uAQADAgADeQADNgQ',
        'AgACAgIAAxkBAAIB0mcbEzvVFMKvx1qs-ZPtvXGwPoZqAAJf4TEbwL7YSB7l3TpvSZLbAQADAgADeAADNgQ']
    media = [types.InputMediaPhoto(media=file_id) for file_id in file_ids]
    await message.answer_media_group(media=media)


@dp.message(F.text.lower() == "c–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã", StateSelection.sectionSelection)
async def cmd_random(message: types.Message, state: FSMContext):
    await message.answer_photo(
        photo='AgACAgIAAxkBAAMRZx-OnS_uBxFsH0gdGfxwZxaOEg0AAnjmMRuxo-FIn71JGxWvdKgBAAMCAAN5AAM2BA',
        caption='<b>–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø—Ä–æ –¥–µ–ª—è–Ω–∞–º</b>', reply_markup=keybords.inline_infro_delyana(), parse_mode="html")
    # await message.answer_photo(
    #  photo='AgACAgIAAxkBAAMTZx-OwCBgr3mzVKylo3_X_3gOTMYAAoHmMRuxo-FIDZdMbTMwJ78BAAMCAAN5AAM2BA',
    #   caption='<b>–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ –¥–æ—Ä–æ–≥–∞–º –∏ —Å–∫–ª–∞–¥–∞–º</b>', reply_markup=keybords.inline_infro_roads_and_sklads(),
    # parse_mode='html')


@dp.message(F.text.lower() == "–æ—Ü–∏—Ñ—Ä–æ–≤–∫–∞ –ø–ª–∞–Ω—à–µ—Ç–æ–≤")
async def planshet(message: Message):
    await message.answer(
        '–í web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Delyana —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ü–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å –ø–ª–∞–Ω—à–µ—Ç—ã –¥–ª—è –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ. –î–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–¥–µ–ª ‚Äú–†–µ–¥–∞–∫—Ç–æ—Ä –ø–ª–∞–Ω—à–µ—Ç–æ–≤‚Äù.\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –¥–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç 2 —Å–ø–æ—Å–æ–±–∞.')
    time.sleep(0.5)
    await message.answer_photo(
        photo='AgACAgIAAxkBAANWZx-QJmcdnsBVMfp9n79Rkp5AHd4AAiDhMRughvhIXm1xWIXFThUBAAMCAAN4AAM2BA',
        caption='<b>–°–ø–æ—Å–æ–± ‚Ññ1</b>\n\n–ò–∑ —Ä–∞–∑–¥–µ–ª–∞ —Å–ª–æ–∏, –ø—É—Ç–µ–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–∫–æ–Ω–∫—É –∫–∞—Ä–∞–Ω–¥–∞—à–∞ –Ω–∞–ø—Ä–æ—Ç–∏–≤ —Å–ª–æ—è ‚Äú–ü–ª–∞–Ω—à–µ—Ç—ã‚Äù',
        parse_mode="html")
    time.sleep(0.5)
    await message.answer_photo(
        photo='AgACAgIAAxkBAANYZx-QRkiaqq8hToPIMPtFJ0YbP2AAAjnhMRughvhIU_W7c80pMGMBAAMCAAN5AAM2BA',
        caption='<b>–°–ø–æ—Å–æ–± ‚Ññ2</b>\n\n–ù–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∏–∫–æ–Ω–∫—É —á–µ–ª–æ–≤–µ–∫–∞ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –∏ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ ‚Äú–†–µ–¥–∞–∫—Ç–æ—Ä –ø–ª–∞–Ω—à–µ—Ç–æ–≤‚Äù ',
        parse_mode="html")
    time.sleep(0.5)
    await message.answer_photo(
        photo='AgACAgIAAxkBAANaZx-QTJE_RDSGpXop5jdoIEe9qXwAAkrhMRughvhILwrEpaAfoiUBAAMCAAN5AAM2BA',
        caption='<b>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–Ω—à–µ—Ç–æ–≤</b>\n\n<b>–®–∞–≥ ‚Ññ1</b>\n–í —Ä–∞–∑–¥–µ–ª–µ ‚Äú–†–µ–¥–∞–∫—Ç–æ—Ä –ø–ª–∞–Ω—à–µ—Ç–æ–≤‚Äù –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω—à–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ ‚Äú–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞–Ω—à–µ—Ç‚Äù',
        parse_mode="html")
    time.sleep(0.5)
    await message.answer_photo(
        photo='AgACAgIAAxkBAANaZx-QTJE_RDSGpXop5jdoIEe9qXwAAkrhMRughvhILwrEpaAfoiUBAAMCAAN5AAM2BA',
        caption='<b>–®–∞–≥ ‚Ññ2</b>\n\n–í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è –∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äú–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞–Ω—à–µ—Ç‚Äù –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞',
        parse_mode="html")
    time.sleep(0.5)
    await message.answer_photo(
        photo='AgACAgIAAxkBAANeZx-QXCyindCNFjEXEhv-HBjqg7gAAovhMRughvhIkndalx18KtEBAAMCAAN4AAM2BA',
        caption='<b>–®–∞–≥ ‚Ññ3</b>\n\n–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞, –ø–ª–∞–Ω—à–µ—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏ –∫ –∫–æ—Ç–æ—Ä–æ–π –æ–Ω –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ, —Å–ª–µ–¥—É–µ—Ç –Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω–µ–≥–æ –ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ ‚Äú–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–≤–∞—Ä—Ç–∞–ª—ã‚Äù',
        parse_mode="html")
    time.sleep(0.5)
    await message.answer_photo(
        photo='AgACAgIAAxkBAANgZx-QbMflzg1patKAsXLHvOmXGwgAAqzhMRughvhICi0rIPYIguQBAAMCAAN4AAM2BA',
        caption='<b>–®–∞–≥ ‚Ññ4</b>\n\n–í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–≤–∞—Ä—Ç–∞–ª—ã –ø–ª–∞–Ω—à–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ü–∏—Ñ—Ä–æ–≤–∞—Ç—å ',
        parse_mode="html")
    time.sleep(0.5)
    await message.answer_photo(
        photo='AgACAgIAAxkBAAN8Zx-Snoi03HtVAUwbIzZBFfNmirgAAuzmMRtJ1wFJDYGaxOgneuoBAAMCAAN5AAM2BA',
        caption='<b>–®–∞–≥ ‚Ññ5</b>\n\n–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –∫–≤–∞—Ä—Ç–∞–ª—ã –Ω–∞–Ω–µ—Å–ª–∏—Å—å –Ω–∞ –∫–æ–ø–∏—é –ø–ª–∞–Ω—à–µ—Ç–∞ —Å–ª–µ–¥—É–µ—Ç –∏—Ö –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∑–Ω–∞—á–æ–∫ –¥–∏—Å–∫–µ—Ç—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ',
        parse_mode="html")
    time.sleep(0.5)
    await message.answer_photo(
        photo='AgACAgIAAxkBAAOHZx-UK4YvFwjvotIVY3VTPmcPmGsAAvjmMRtJ1wFJ9Vsc__-t8CYBAAMCAAN5AAM2BA',
        caption='<b>–®–∞–≥ ‚Ññ6</b>\n\n–ü–æ—Å–ª–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –æ—Ü–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω—à–µ—Ç –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ –∫–∞—Ä—Ç–µ. –î–ª—è —ç—Ç–æ–≥–æ —Å–ª–µ–¥—É–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–∞—Ä—Ç–æ–π –∏ –≤–∫–ª—é—á–∏—Ç—å —Å–ª–æ–π ‚Äú–ü–ª–∞–Ω—à–µ—Ç—ã‚Äù ',
        parse_mode="html")


@dp.message(F.text.lower() == "—Ñ–æ—Ç–æ–∑–∞–º–µ—Ä —à—Ç–∞–±–µ–ª—è")
async def planshet(message: Message):
    await message.answer_photo(
        photo='AgACAgIAAxkBAAO7Zx-WzU6D5zJ4Rq8Cz366ShruWTwAAhPnMRtJ1wFJJLLUNqyhZQcBAAMCAAN5AAM2BA',
        caption='<b>–§–æ—Ç–æ–∑–∞–º–µ—Ä —à—Ç–∞–±–µ–ª—è</b>\n\n–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ñ–æ—Ç–æ–∑–∞–º–µ—Ä–∞ —à—Ç–∞–±–µ–ª–µ–π –≤ web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–µ–ª—è–Ω–∞, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Å—á—ë—Ç–∞ –æ–±—ä–µ–º–∞ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–π –¥—Ä–µ–≤–µ—Å–∏–Ω—ã, —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–æ—Ç–æ —à—Ç–∞–±–µ–ª–µ–π –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ –∏ –ø—Ä–∏–≤—è–∑–∫–∞ –∏—Ö –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–µ–ª—è–Ω–µ.–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–π—Ç–∏ –≤ –¥–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∏–∫–æ–Ω–∫–µ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ —Å—Ç—Ä–æ—á–∫—É ‚Äú–ó–∞–º–µ—Ä —à—Ç–∞–±–µ–ª–µ–π‚Äù',
        parse_mode="html")
    time.sleep(0.5)
    await message.answer_photo(
        photo='AgACAgIAAxkBAAIHG2cqCz6axJQBR3yXlPFPwfG1BWQzAAKB5DEba_RQSX7TFXlLCftZAQADAgADeQADNgQ',
        caption='<b>–ü—Ä–∏–≤—è–∂–∏—Ç–µ —à—Ç–∞–±–µ–ª—å –∫ –ª–µ—Å–æ—Å–µ–∫–µ</b>\n\n–î–ª—è —ç—Ç–æ–≥–æ –≤ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Å–ø–∏—Å–∫–µ –¥–µ–ª—è–Ω, —Å–ª–µ–¥—É–µ—Ç –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é –Ω–∞–º –∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∑–Ω–∞—á–æ–∫ –ø–ª—é—Å–∞ —Å–ø—Ä–∞–≤–∞ –æ—Ç –Ω–µ—ë, –ø–æ—Å–ª–µ —á–µ–≥–æ –¥–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å',
        parse_mode="html")
    time.sleep(0.5)
    await message.answer_photo(
        photo='AgACAgIAAxkBAAIHGWcqCztMBPHGqdUtfxne7KVGM8HUAAKA5DEba_RQSciVcVKBr_SHAQADAgADeQADNgQ',
        caption='<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —à—Ç–∞–±–µ–ª—å</b>\n\n–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ–±—ä–µ–∫—Ç —à—Ç–∞–±–µ–ª—å —Å–æ–∑–¥–∞–Ω, –Ω—É–∂–Ω–æ –ø–æ –Ω–µ–º—É –∫–ª–∏–∫–Ω—É—Ç—å –∏ –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–∂–∞—Ç—å –Ω–∞ –æ–∫–Ω–æ ‚Äú–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ‚Äù –∏ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–µ —Ñ–æ—Ç–æ—Å–Ω–∏–º–∫–∏ (–æ—Ç 1 –¥–æ 15 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)',
        parse_mode="html")
    time.sleep(0.5)
    await message.answer_photo(
        photo='AgACAgIAAxkBAAIHF2cqCzj9gCUoMUmT7We3ODkg8JMQAAJ_5DEba_RQSTiLcy4aKIuRAQADAgADeQADNgQ',
        caption='<b></b>\n\n–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –Ω–∞—à–∏–º –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º. –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏, –Ω–∞ –∫–∞–∂–¥–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —à–∏—Ä–∏–Ω—É –∑–∞–º–µ—Ä–∞ –∏ –¥–∞–Ω–Ω—ã–µ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã.–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∏—Ä–∏–Ω—É –∑–∞–º–µ—Ä–∞, —Å–ª–µ–¥—É–µ—Ç –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ ‚Äú–®–∏—Ä–∏–Ω–∞ –∑–∞–º–µ—Ä–∞‚Äù –Ω–∞—Ö–æ–¥—è—â–µ–π—Å—è —Å–≤–µ—Ä—Ö—É, –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–≤–µ —Ç–æ—á–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ—Å–Ω–∏–º–∫–µ –∏ —É–∫–∞–∑–∞—Ç—å –¥–ª–∏–Ω—É',
        parse_mode="html")


@dp.callback_query(F.data == "create_infro", StateSelection.sectionSelection)
async def send_random_value(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(text='–û—Ç–ª–∏—á–Ω–æ! –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ',
                                  reply_markup=keybords.keybord_infro_delyana())
    await state.set_state(StateSelection.create_infro)


@dp.callback_query(F.data == "roads_and_sklads")
async def send_random_value(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(text='–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –µ—â–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è')
    await state.set_state(StateSelection.create_infro)


@dp.message(F.text.lower() == "–¥—Ä—É–≥–æ–µ")
async def another(message: Message):
    await message.answer('–ù–£ –¥—Ä—É–≥–æ–µ —Ç–∞–∫ –¥—Ä—É–≥–æ–µ')


@dp.message(F.text, StateSelection.sectionSelection)
async def no_section(message: Message):
    await message.answer('–ö–∞–∂–µ—Ç—Å—è —É –Ω–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π)')


@dp.message(F.text.lower() == '—Ö—É–π')
async def no_section(message: Message, state: FSMContext):
    data = await state.get_state()
    await message.answer(str(data))


@dp.message(F.photo)
async def photo(message: Message):
    photo_data = message.photo[-1]
    await message.answer(f'{photo_data}')


@dp.message(F.text.lower() == '–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä')
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("–î–∞–≤–∞–π—Ç–µ —É–∑–Ω–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –¥–ª—è —Ç–µ–±—è —Ç–∞—Ä–∏—Ñ–∞ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è!",
                         reply_markup=keybords.start_brif())
    await state.set_state(StateSelection.calcSelection)


@dp.callback_query(F.data == "start_brif", StateSelection.calcSelection)
async def first(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∞—Ä–µ–Ω–¥—ã')
    await state.set_state(StateSelection.DA_state)


counter = []


@dp.message(StateSelection.DA_state)
async def second(message: Message, state: FSMContext):
    da = int(message.text)
    counter.append(da)
    await state.update_data(DA_state=da)
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤')
    await state.set_state(StateSelection.employes)


@dp.message(StateSelection.employes)
async def third(message: Message, state: FSMContext):
    employes = int(message.text)
    await state.update_data(employes=int(employes))
    await state.set_state(StateSelection.DA_state)
    counter.append(employes)
    await message.answer(
        text='–ú—ã –º–æ–∂–µ–º –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—Ç—Ä–æ–≤—ã–µ –∏ –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç, –≤–≤–µ–¥–∏—Ç–µ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–µ—Ç –≤–≤–µ–¥–∏—Ç–µ 0')
    await state.set_state(StateSelection.maps)


@dp.message(StateSelection.maps)
async def mapss(message: Message, state: FSMContext):
    maps = int(message.text)
    counter.append(maps)
    await state.update_data(maps=maps)
    await message.answer(text='–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É', reply_markup=keybords.start_count())
    await state.set_state(StateSelection.count)


def counting(dogovor, sotrudniki, karty):
    # –í–Ω–µ–¥—Ä–µ–Ω–∏–µ
    vnedrenie = dogovor * 15000 + sotrudniki * 5000 + karty * 30000
    return vnedrenie


@dp.callback_query(StateSelection.count and F.data == "start_count")
async def ending(callback: types.CallbackQuery):
    dogovor = counter[0]
    sotrudniki = counter[1]
    karty = counter[2]
    if dogovor <= 3 and sotrudniki <= 10:
        await callback.message.answer(
            '<b>–¢–∞—Ä–∏—Ñ:</b>–ü—Ä–æ—Ñ\n\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–∏: </b>70000—Ä—É–±/–≥–æ–¥\n\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è:</b>' + str(
                counting(dogovor, sotrudniki, karty)), ' —Ä—É–±', parse_mode='html')

    elif sotrudniki > 20:
        await callback.message.answer(
            '<b>–¢–∞—Ä–∏—Ñ:</b>–ö–æ–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π\n\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–∏: </b> —Ö–∑ —Ä—É–±/–≥–æ–¥\n\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è:</b>' + str(
                counting(dogovor, sotrudniki, karty)), ' —Ä—É–±', parse_mode='html')

    else:
        await callback.message.answer(
            '<b>–¢–∞—Ä–∏—Ñ:</b>–ü—Ä–æ—Ñ+\n\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–∏: </b>100000—Ä—É–±/–≥–æ–¥\n\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è:</b>' + str(
                counting(dogovor, sotrudniki, karty)), ' —Ä—É–±', parse_mode='html')
    counter.clear()


@dp.message(F.text)
async def no_section(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ –∫–Ω–æ–ø–æ–∫')


@dp.message(StateSelection.moduleSelection)
async def no_module(message: Message):
    await message.answer('–£ –Ω–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –º–æ–¥—É–ª—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤—ã–±–µ—Ä–∏ –¥–∞')


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
